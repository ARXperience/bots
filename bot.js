// bot.js ‚Äî PRO + Flujo de Cotizaci√≥n + Botones con estilo inline + Auto-linkify // (Markdown + Copiar + Typing + Persistencia) const msgs = document.getElementById('messages'); const input = document.getElementById('input'); const send = document.getElementById('send'); const typing= document.getElementById('typing'); const clear = document.getElementById('clear'); const STORAGE_KEY = 'cdd_chat_history_v1'; const QUOTE_KEY = 'cdd_quote_leads_v1'; const FLOW_KEY = 'cdd_quote_flow_state_v1'; // === Base de conocimiento (con CTA integrado) === const CTA = "\n\n**Cont√°ctanos:** WhatsApp +57 000 000 0000 ¬∑ hola@centrodigitaldediseno.com"; const KB = { servicios: "### ¬øQu√© hacemos?\n- **P√°ginas web con IA** (landing, multip√°gina, e-commerce).\n- **Branding** (identidad visual).\n- **Contenido para redes** (Reels/TikTok/Shorts) con **SEO social**.\n- **Automatizaciones** (ManyChat, Make, WhatsApp Business API).\n- **Bots de IA** para atenci√≥n y ventas 24/7.\n- **E-commerce & embudos** (checkout, anal√≠tica).\n- **Creativos con IA** (foto/video de producto, anuncios).\n- **AR** y **Ads (Meta)**.\n- **Growth Partner** enfocado en KPIs." + CTA, web: "### P√°ginas web & tiendas\nDise√±o moderno, r√°pido y orientado a conversi√≥n (estructura, copy, anal√≠tica).\nIntegraci√≥n con **WhatsApp/CRM/ManyChat** para capturar y nutrir leads." + CTA, automat: "### Automatizaciones & Bots de IA\n- **ManyChat/WhatsApp**: flujos, segmentaci√≥n, campa√±as.\n- **Make**: integra formularios, CRMs, Google, Email, Meta, etc.\n- **Bots de IA** entrenados con tus textos/FAQs para calificar leads y derivar a humano." + CTA, cotiz: "### Precios & cotizaci√≥n\nTrabajamos **por alcance y objetivos**; el valor depende de p√°ginas, integraciones, volumen de contenido y automatizaciones.\n> Nota: las **apps premium** no son gratuitas (costo mensual del proveedor).\n\n**C√≥mo cotizamos**\n1) **Brief** r√°pido + **llamada** de 15‚Äì20 min.\n2) Propuesta con **entregables, tiempos y valor**.\n3) Alineaci√≥n y arranque del **Sprint 1**." + CTA }; // === Estado del flujo de cotizaci√≥n === let flow = loadFlowState() || { activo: false, paso: 0, datos: { nombre:"", servicios:"", empresa:"", telefono:"" } }; // ====== Arranque ====== restoreHistory(); if (historyEmpty()) { botMsg("üëã **Hola, soy el asistente del Centro Digital de Dise√±o.**\nRespondo sobre **servicios**, **p√°ginas web**, **automatizaciones** y **cotizaci√≥n**."); } send.onclick = () => { const txt = input.value.trim(); if (!txt) return; input.value = ""; userMsg(txt); route(txt); }; input.addEventListener("keydown", e => { if (e.key === "Enter" && !e.shiftKey) { e.preventDefault(); send.click(); } }); document.querySelectorAll(".chip").forEach(c => { c.onclick = () => { userMsg(c.dataset.q); route(c.dataset.q); }; }); if (clear) { clear.onclick = () => { localStorage.removeItem(STORAGE_KEY); localStorage.removeItem(FLOW_KEY); msgs.innerHTML = ""; typing.style.display="none"; flow = { activo:false, paso:0, datos:{nombre:"",servicios:"",empresa:"",telefono:""} }; botMsg("üßπ Historial limpio. ¬øQuieres **cotizar**? Puedo guiarte paso a paso."); }; } // ====== Router principal (flujo o respuestas est√°ndar) ====== function route(q){ if (/^cancelar$/i.test(q.trim())) { if (flow.activo){ flow = { activo:false, paso:0, datos:{nombre:"",servicios:"",empresa:"",telefono:""} }; saveFlowState(); return botMsg("Flujo de cotizaci√≥n **cancelado**. Cuando quieras, escribe *cotizar* para retomarlo."); } } if (flow.activo) { handleCotizacion(q); return; } const qn = norm(q); if (/(cotiz|presupuesto|precio|cu[a√°]nto vale|cu[a√°]nto cuesta)/.test(qn)) { startCotizacion(); return; } respond(q); } // ====== Flujo de Cotizaci√≥n ====== function startCotizacion(){ flow = { activo:true, paso:1, datos:{ nombre:"", servicios:"", empresa:"", telefono:"" } }; saveFlowState(); botMsg("¬°Perfecto! Para darte una **cotizaci√≥n personalizada** necesito unos datos.\n\n1Ô∏è‚É£ ¬øCu√°l es tu **nombre completo**?\n\n*(Puedes escribir cancelar para salir del flujo.)*"); } function handleCotizacion(respuesta){ const text = respuesta.trim(); switch(flow.paso){ case 1: { flow.datos.nombre = text; flow.paso = 2; saveFlowState(); botMsg(Gracias, **${escapeHTML(text)}**. 2Ô∏è‚É£ Cu√©ntame: ¬øQu√© **servicios** te interesan?\n_Ej.: ‚ÄúLanding page + automatizaci√≥n WhatsApp‚Äù, ‚ÄúE-commerce con branding‚Äù, ‚ÄúBot de IA para atenci√≥n‚Äù, etc._); break; } case 2: { flow.datos.servicios = text; flow.paso = 3; saveFlowState(); botMsg("3Ô∏è‚É£ ¬øC√≥mo se llama tu **empresa o proyecto**?"); break; } case 3: { flow.datos.empresa = text; flow.paso = 4; saveFlowState(); botMsg("4Ô∏è‚É£ ¬øCu√°l es tu **n√∫mero de WhatsApp o tel√©fono** para compartirte la propuesta?"); break; } case 4: { if (!isValidPhone(text)) { botMsg("Parece que el n√∫mero no es v√°lido. Intenta con un formato como 3001234567 o incluye c√≥digo de pa√≠s +57 3001234567."); return; } flow.datos.telefono = cleanPhone(text); finalizeQuote(); break; } default: flow = { activo:false, paso:0, datos:{nombre:"",servicios:"",empresa:"",telefono:""} }; saveFlowState(); botMsg("He reiniciado el flujo. Escribe **cotizar** para empezar de nuevo."); } } function finalizeQuote(){ // Guardar lead en localStorage const leads = JSON.parse(localStorage.getItem(QUOTE_KEY) || "[]"); const lead = { ...flow.datos, fecha: new Date().toISOString() }; leads.push(lead); localStorage.setItem(QUOTE_KEY, JSON.stringify(leads)); // Botones con ESTILO INLINE (funcionan aunque no agregues CSS) const { nombre, servicios, empresa, telefono } = flow.datos; const wappText = encodeURIComponent( Hola, soy ${nombre} (${empresa}). Me interesa: ${servicios}. Mi contacto: ${telefono}. ); const mailBody = encodeURIComponent( Nombre: ${nombre} Servicios: ${servicios} Empresa/Proyecto: ${empresa} Tel√©fono: ${telefono} Mensaje: Hola, quiero avanzar con la cotizaci√≥n. ); const btnStyle = "display:inline-block;margin-top:8px;margin-right:8px;background:#10a37f;color:#fff;text-decoration:none;padding:8px 14px;border-radius:10px;font-weight:600;font-size:14px"; const resumen = ### ¬°Genial, ${escapeHTML(nombre)}! üôå Con estos datos armamos tu propuesta con **entregables, tiempos y valor**. Te contactaremos en breve. **Resumen** - **Servicios:** ${escapeHTML(servicios)} - **Empresa/Proyecto:** ${escapeHTML(empresa)} - **WhatsApp/Tel√©fono:** ${escapeHTML(telefono)} **Acceso r√°pido** <a href="https://wa.me/57${onlyDigits(telefono).replace(/^57/,'')}?text=${wappText}" target="_blank" style="${btnStyle}">üì≤ WhatsApp</a> <a href="mailto:hola@centrodigitaldediseno.com?subject=Cotizaci√≥n&body=${mailBody}" style="${btnStyle}">‚úâÔ∏è Email</a> > Si necesitas corregir algo, escribe **cotizar** para iniciar nuevamente.; flow = { activo:false, paso:0, datos:{nombre:"",servicios:"",empresa:"",telefono:""} }; saveFlowState(); botMsg(resumen); botMsg(KB.cotiz); } // ====== Respuestas est√°ndar ====== function respond(q){ showTyping(true); setTimeout(() => { showTyping(false); const qn = norm(q); if ( /(servicios|qu√© hacen|que hacen|ofrecen|todo lo que hacen)/.test(qn) ) return botMsg(KB.servicios); if ( /(web|landing|tienda|ecommerce|shopify|woocommerce|p√°gina|pagina)/.test(qn) ) return botMsg(KB.web); if ( /(automat|whatsapp|manychat|make|bot|ia|integraci[o√≥]n|crm)/.test(qn) ) return botMsg(KB.automat); if ( /(precio|cu[a√°]nto vale|cu[a√°]nto cuesta|cotizaci[o√≥]n|presupuesto|cotizar)/.test(qn) ) { botMsg(KB.cotiz + "\n\n¬øQuieres que **inicie el flujo de cotizaci√≥n** aqu√≠ mismo? Escribe **cotizar**."); return; } const hit = smallSearch(qn); if (hit) return botMsg(hit); botMsg("Puedo ayudarte con **servicios**, **p√°ginas web**, **automatizaciones** y **cotizaci√≥n**. ¬øQu√© necesitas exactamente?\n\nEj.: *‚ÄúLanding + WhatsApp‚Äù*, *‚ÄúCalendarizar contenido con IA‚Äù*." + CTA); }, 420 + Math.random()*260); } // ====== Buscador difuso muy simple ====== function smallSearch(q){ const pairs = [ [KB.servicios, ["branding","seo social","growth","ads","ar","reels","tiktok","shorts","contenido"]], [KB.web, ["web","landing","tienda","ecommerce","shopify","woocommerce","velocidad","conversion","analitica","analytics","crm","whatsapp"]], [KB.automat, ["automat","manychat","whatsapp","make","bot","flow","crm","integracion","integraci√≥n"]], [KB.cotiz, ["precio","cotiz","presupuesto","propuesta","valor"]] ]; let best=null,score=0; pairs.forEach(([text,keys])=>{ const s = keys.reduce((acc,k)=> acc + (q.includes(k)?1:0), 0); if (s>score){score=s; best=text;} }); return score>0 ? best : null; } // ====== Render con Markdown + bot√≥n Copiar ====== function render(role, mdText){ const row = document.createElement("div"); row.className = "row " + (role === "assistant" ? "assistant" : "user"); const av = document.createElement("div"); av.className = "avatar"; av.textContent = role === "assistant" ? "AI" : "T√∫"; const bub = document.createElement("div"); bub.className = "bubble"; // 1) Markdown ‚Üí HTML let html = mdToHTML(mdText); // 2) Auto-convertir l√≠neas tipo "WhatsApp: https://..." y "Email: mailto:..." html = html .replace(/WhatsApp:\s*(https?:\/\/[^\s<]+)/gi, (_m, url) => { const btnStyle = "display:inline-block;margin-top:8px;margin-right:8px;background:#10a37f;color:#fff;text-decoration:none;padding:8px 14px;border-radius:10px;font-weight:600;font-size:14px"; return <a href="${url}" target="_blank" style="${btnStyle}">üì≤ WhatsApp</a>; }) .replace(/Email:\s*(mailto:[^\s<]+)/gi, (_m, url) => { const btnStyle = "display:inline-block;margin-top:8px;margin-right:8px;background:#10a37f;color:#fff;text-decoration:none;padding:8px 14px;border-radius:10px;font-weight:600;font-size:14px"; return <a href="${url}" style="${btnStyle}">‚úâÔ∏è Email</a>; }); bub.innerHTML = html; // Bot√≥n Copiar en bloques <pre> bub.querySelectorAll("pre").forEach(pre => { const head = document.createElement("div"); head.className = "code-head"; head.innerHTML = <span>c√≥digo</span>; const btn = document.createElement("button"); btn.className = "copy"; btn.textContent = "Copiar"; btn.addEventListener("click", ()=>{ const code = pre.querySelector("code")?.innerText || pre.innerText; navigator.clipboard.writeText(code); btn.textContent = "Copiado ‚úì"; setTimeout(()=> btn.textContent = "Copiar", 1100); }); pre.parentNode.insertBefore(head, pre); head.appendChild(btn); }); row.appendChild(av); row.appendChild(bub); msgs.appendChild(row); msgs.scrollTop = msgs.scrollHeight; saveToHistory(role, mdText); } function userMsg(text){ render("user", escapeHTML(text)); } function botMsg(text){ render("assistant", text); } // ====== Utilidades UI ====== function showTyping(v){ typing.style.display = v ? "flex" : "none"; } // ====== Mini Markdown ====== function mdToHTML(md){ // bloques
code
md = md.replace(/
([\s\S]*?)
/g, (_,code)=> <pre><code>${escapeHTML(code.trim())}</code></pre>); // t√≠tulos, negritas, inline code md = md .replace(/^### (.*)$/gim,'<h3>$1</h3>') .replace(/^## (.*)$/gim,'<h2>$1</h2>') .replace(/^# (.*)$/gim,'<h1>$1</h1>') .replace(/\*\*(.+?)\*\*/g,'<strong>$1</strong>') .replace(/([^]+?)/g,'<code>$1</code>'); // listas simples y p√°rrafos const lines = md.split('\n').map(line=>{ if (/^\s*-\s+/.test(line)) return <li>${line.replace(/^\s*-\s+/, '')}</li>; if (/^\s*‚Ä¢\s+/.test(line)) return <li>${line.replace(/^\s*‚Ä¢\s+/, '')}</li>; if (/^<h\d|^<pre|^<ul|^<li|^<\/li|^<\/ul|^<a /.test(line)) return line; // no envolver <a> en <p> return line.trim()? <p>${line}</p> : '<p style="margin:4px 0"></p>'; }); const joined = lines.join('\n').replace(/(?:<li>[\s\S]*?<\/li>\n?)+/g, m => <ul>${m}</ul>); return joined; } function escapeHTML(s){return (s||'').replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;'}[m]));} function norm(s){return (s||'').toLowerCase() .normalize('NFD').replace(/\p{Diacritic}/gu,'') .replace(/[^a-z0-9√°√©√≠√≥√∫√±√º\s]/g,' ') .replace(/\s+/g,' ') .trim(); } // ====== Validaciones ====== function isValidPhone(v){ const d = onlyDigits(v); if (/^57\d{10}$/.test(d)) return true; if (/^\d{10}$/.test(d)) return true; return false; } function cleanPhone(v){ let d = onlyDigits(v); if (/^\d{10}$/.test(d)) d = "57" + d; return d; } function onlyDigits(s){ return (s||'').replace(/\D+/g,''); } // ====== Persistencia (chat + flujo + leads) ====== function saveToHistory(role, text){ const arr = JSON.parse(localStorage.getItem(STORAGE_KEY) || "[]"); arr.push({ role, text, t: Date.now() }); localStorage.setItem(STORAGE_KEY, JSON.stringify(arr)); } function restoreHistory(){ const arr = JSON.parse(localStorage.getItem(STORAGE_KEY) || "[]"); if (!arr.length) return; arr.forEach(m => { if (m.role === 'assistant') botMsg(m.text); else userMsg(m.text); }); const savedFlow = loadFlowState(); if (savedFlow?.activo){ flow = savedFlow; botMsg("Ten√≠amos un **flujo de cotizaci√≥n** pendiente. ¬øDeseas **continuar**? Si prefieres salir, escribe cancelar."); } } function historyEmpty(){ const arr = JSON.parse(localStorage.getItem(STORAGE_KEY) || "[]"); return arr.length === 0; } function saveFlowState(){ localStorage.setItem(FLOW_KEY, JSON.stringify(flow)); } function loadFlowState(){ try { return JSON.parse(localStorage.getItem(FLOW_KEY) || "null"); } catch { return null; } }
